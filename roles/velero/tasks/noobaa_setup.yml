- when: not noobaa|bool
  block:
  - name: Deleting existing NooBaa bsl storage
    k8s:
      state: absent
      definition: "{{ lookup('template', 'noobaa_bsl.yml.j2') }}"
    vars:
      noobaa_endpoint: " "
      noobaa_s3_access_key_id: " "
      noobaa_s3_secret_access_key: " "
    ignore_errors: yes

  - name: Discovering existing NooBaa Systems owned by OADP operator
    k8s_facts:
      api_version: "noobaa.io/v1alpha1"
      namespace: "{{ velero_namespace }}"
      kind: NooBaa
      label_selectors:
      - app=noobaa
    register: oadp_noobaa_system
    ignore_errors: yes

  - name: Deleting NooBaa Systems owned by OADP operator
    k8s:
      api_version: "noobaa.io/v1alpha1"
      name: "{{ item.metadata.name }}"
      state: absent
      kind: NooBaa
      namespace: "{{ velero_namespace }}"
    loop: "{{ oadp_noobaa_system.resources }}"
    ignore_errors: yes

- when: noobaa|bool
  block:
  - name: Discover NooBaa CRDs
    k8s_facts:
      api_version: "apiextensions.k8s.io/v1beta1"
      kind: CustomResourceDefinition
      name: "{{ item }}"
    loop: "{{ noobaa_expected_crds }}"
    register: noobaa_found_crds

  - name: Check if NooBaa CRDs exist 
    set_fact:
      noobaa_crds_count: "{{ noobaa_crds_count | int + 1 }}"
    loop: "{{ noobaa_found_crds.results }}"
    when: item.resources | length > 0 
  
  - set_fact:
      noobaa_crds_exist: "{{ (noobaa_crds_count | int) >= (noobaa_expected_crds | length) }}"

  - name: Validate that NooBaa CRDs exist
    fail:
      msg: "NooBaa CRDs are not present, please install the OCS Operator (Noobaa Operator)"
    when: not noobaa_crds_exist

  # Discover existing NooBaa System or create new
  - when: noobaa_crds_exist|bool
    block:
    - name: Discover existing NooBaa system
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: NooBaa
      register: noobaa_system
    
    - set_fact:
        noobaa_system_found: "{{ noobaa_system.resources|length > 0 }}"

    - set_fact:
        noobaa_system_namespace: "{{ noobaa_system_namespace if not noobaa_system_found else noobaa_system.resources[0].metadata.namespace }}"

    - name: Creating a new NooBaa system
      when: not noobaa_system_found|bool
      k8s:
        state: present
        definition: "{{ lookup('template', 'noobaa_system.yml.j2') }}"

    - name: Waiting for NooBaa system to become ready
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: NooBaa
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_system_status
      retries: 60
      delay: 10
      until: noobaa_system_status.resources|length > 0 and
             noobaa_system_status.resources[0].status is defined and
             noobaa_system_status.resources[0].status.phase == 'Ready'
      ignore_errors: true

    - set_fact:
        noobaa_system_ready: "{{ False if noobaa_system_status.resources|length == 0 or
                            noobaa_system_status.resources[0].status is not defined or
                            noobaa_system_status.resources[0].status.phase != 'Ready' else True }}"
  

  # discover routes and secrets
  - when: noobaa_system_ready|bool
    block:
    - name: Discovering NooBaa S3 endpoint
      k8s_facts:
        api_version: route.openshift.io/v1
        kind: Route
        name: s3
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_s3_endpoint
      retries: 10
      delay: 3
      until: noobaa_s3_endpoint.resources is defined and
             noobaa_s3_endpoint.resources[0] is defined and
             noobaa_s3_endpoint.resources[0].status.ingress is defined

    - set_fact:
        noobaa_endpoint: "{{ noobaa_s3_endpoint.resources[0].status.ingress[0].host }}"
      when: noobaa_s3_endpoint.resources[0].status.ingress[0].host is defined

    - name: Discovering NooBaa S3 Credentials
      k8s_facts:
        api_version: v1
        kind: Secret
        name: "{{ noobaa_admin_secret }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_admin_secret
      retries: 20
      delay: 3
      until: noobaa_admin_secret.resources|length > 0

    - set_fact:
        noobaa_s3_access_key_id: "{{ noobaa_admin_secret.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}"
        noobaa_s3_secret_access_key: "{{ noobaa_admin_secret.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}"

    - set_fact:
        noobaa_secret_contents: "[default]\naws_access_key_id={{ noobaa_s3_access_key_id }}\naws_secret_access_key={{ noobaa_s3_secret_access_key }}"
    
    - name: Create Noobaa s3 cloud-credentials secret
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ velero_aws_secret_name }}"
            namespace: "{{ velero_namespace }}"
          data:
            cloud: "{{noobaa_secret_contents | b64encode}}"
    

    # - name: Discovering NooBaa CA Bundle
    #   shell: "{{ item }}"
    #   loop:
    #   - openssl s_client -showcerts -verify 5 -connect {{ noobaa_endpoint }}:443 < /dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; out="cert"a".crt"; print >out}' && for cert in *.crt; do newname=$(openssl x509 -noout -subject -in $cert | sed -n 's/^.*CN=\(.*\)$/\1/; s/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem; mv $cert $newname; done;
    #   - cat *.pem
    #   - rm *.pem
    #   register: noobaa_ca_bundle_raw
    #   when: noobaa_s3_endpoint_proto == 'https'

    # - set_fact:
    #     noobaa_ca_bundle: "{{ noobaa_ca_bundle_raw.results[1].stdout }}"
    #   when: noobaa_s3_endpoint_proto == 'https'
    

  # NooBaa Bucket + noobaa bsl creation
  - when: noobaa_system_ready|bool
    environment:
      AWS_ACCESS_KEY_ID: "{{ noobaa_s3_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "{{ noobaa_s3_secret_access_key }}"
    block:
    - name: "Create PV Pool BackingStore"
      k8s:
        state: "present"
        definition: "{{ lookup('template', 'pv_pool_backingstore.yml.j2') }}"
    
    - name: "Wait for PV Pool BackingStore to exist"
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: BackingStore
        name: "{{ noobaa_system_pv_pool_bs_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_backingstore
      until: (noobaa_backingstore.resources|length) > 0
      retries: 30
      delay: 10

    - name: "Wait for PV Pool BackingStore to have status phase"
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: BackingStore
        name: "{{ noobaa_system_pv_pool_bs_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_backingstore
      until: (noobaa_backingstore.resources|first).status.phase is defined
      retries: 60
      delay: 10

    - name: "Wait for PV Pool BackingStore to be in Ready phase and OPTIMAL mode"
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: BackingStore
        name: "{{ noobaa_system_pv_pool_bs_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_backingstore
      until: ((noobaa_backingstore.resources|first).status.phase == "Ready") and ((noobaa_backingstore.resources|first).status.mode.modeCode == "OPTIMAL") 
      retries: 75
      delay: 10

    - name: Create PV Pool BucketClass
      k8s:
        state: "present"
        definition: "{{ lookup('template', 'pv_pool_bucketclass.yml.j2') }}"

    - name: "Wait for PV Pool BucketClass to exist"
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: BucketClass
        name: "{{ noobaa_system_pv_pool_bc_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_bucketclass
      until: (noobaa_bucketclass.resources|length) > 0
      retries: 30
      delay: 10

    - name: "Wait for PV Pool BucketClass to have status"
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: BucketClass
        name: "{{ noobaa_system_pv_pool_bc_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_bucketclass
      until: (noobaa_bucketclass.resources|first).status is defined
      retries: 30
      delay: 10

    - name: "Wait for PV Pool BucketClass to be in Ready phase" #TODO Optimal mode
      k8s_facts:
        api_version: "noobaa.io/v1alpha1"
        kind: BucketClass
        name: "{{ noobaa_system_pv_pool_bc_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_bucketclass
      until: (noobaa_bucketclass.resources|first).status.phase == "Ready"
      retries: 75
      delay: 10

    - name: "Create PV Pool ObjectBucketClaim"
      k8s:
        state: "present"
        definition: "{{ lookup('template', 'pv_pool_objectbucketclaim.yml.j2') }}"

    - name: "Wait for Bucket to exist"
      k8s_facts:
        api_version: "objectbucket.io/v1alpha1"
        kind: ObjectBucketClaim 
        name: "{{ noobaa_system_pv_pool_bucket_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_bucket
      until: (noobaa_bucket.resources|length) > 0
      retries: 30
      delay: 10

    - name: "Wait for Bucket to have status"
      k8s_facts:
        api_version: "objectbucket.io/v1alpha1"
        kind: ObjectBucketClaim
        name: "{{ noobaa_system_pv_pool_bucket_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_bucket
      until: (noobaa_bucket.resources|first).status is defined
      retries: 30
      delay: 10

    - name: "Wait for Bucket to become bound"
      k8s_facts:
        api_version: "objectbucket.io/v1alpha1"
        kind: ObjectBucketClaim
        name: "{{ noobaa_system_pv_pool_bucket_name }}"
        namespace: "{{ noobaa_system_namespace }}"
      register: noobaa_bucket
      until: (noobaa_bucket.resources|first).status.phase == "Bound"
      retries: 75
      delay: 10
